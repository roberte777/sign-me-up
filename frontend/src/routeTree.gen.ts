/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CreateImport } from './routes/create'
import { Route as IndexImport } from './routes/index'
import { Route as EventEventIdIndexImport } from './routes/event/$eventId/index'
import { Route as EventEventIdRegisterImport } from './routes/event/$eventId/register'
import { Route as EventEventIdEditImport } from './routes/event/$eventId/edit'

// Create/Update Routes

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventEventIdIndexRoute = EventEventIdIndexImport.update({
  id: '/event/$eventId/',
  path: '/event/$eventId/',
  getParentRoute: () => rootRoute,
} as any)

const EventEventIdRegisterRoute = EventEventIdRegisterImport.update({
  id: '/event/$eventId/register',
  path: '/event/$eventId/register',
  getParentRoute: () => rootRoute,
} as any)

const EventEventIdEditRoute = EventEventIdEditImport.update({
  id: '/event/$eventId/edit',
  path: '/event/$eventId/edit',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/event/$eventId/edit': {
      id: '/event/$eventId/edit'
      path: '/event/$eventId/edit'
      fullPath: '/event/$eventId/edit'
      preLoaderRoute: typeof EventEventIdEditImport
      parentRoute: typeof rootRoute
    }
    '/event/$eventId/register': {
      id: '/event/$eventId/register'
      path: '/event/$eventId/register'
      fullPath: '/event/$eventId/register'
      preLoaderRoute: typeof EventEventIdRegisterImport
      parentRoute: typeof rootRoute
    }
    '/event/$eventId/': {
      id: '/event/$eventId/'
      path: '/event/$eventId'
      fullPath: '/event/$eventId'
      preLoaderRoute: typeof EventEventIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/event/$eventId/edit': typeof EventEventIdEditRoute
  '/event/$eventId/register': typeof EventEventIdRegisterRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/event/$eventId/edit': typeof EventEventIdEditRoute
  '/event/$eventId/register': typeof EventEventIdRegisterRoute
  '/event/$eventId': typeof EventEventIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/event/$eventId/edit': typeof EventEventIdEditRoute
  '/event/$eventId/register': typeof EventEventIdRegisterRoute
  '/event/$eventId/': typeof EventEventIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/event/$eventId/edit'
    | '/event/$eventId/register'
    | '/event/$eventId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/event/$eventId/edit'
    | '/event/$eventId/register'
    | '/event/$eventId'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/event/$eventId/edit'
    | '/event/$eventId/register'
    | '/event/$eventId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  EventEventIdEditRoute: typeof EventEventIdEditRoute
  EventEventIdRegisterRoute: typeof EventEventIdRegisterRoute
  EventEventIdIndexRoute: typeof EventEventIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  EventEventIdEditRoute: EventEventIdEditRoute,
  EventEventIdRegisterRoute: EventEventIdRegisterRoute,
  EventEventIdIndexRoute: EventEventIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/event/$eventId/edit",
        "/event/$eventId/register",
        "/event/$eventId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/event/$eventId/edit": {
      "filePath": "event/$eventId/edit.tsx"
    },
    "/event/$eventId/register": {
      "filePath": "event/$eventId/register.tsx"
    },
    "/event/$eventId/": {
      "filePath": "event/$eventId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
